package net.frozenorb.foxtrot.gameplay.armorclass;

import cc.fyre.proton.Proton;
import cc.fyre.proton.util.ItemBuilder;
import lombok.Getter;
import net.frozenorb.foxtrot.Foxtrot;
import net.frozenorb.foxtrot.gameplay.armorclass.listener.ArmorClassListener;
import net.frozenorb.foxtrot.gameplay.armorclass.listener.ShardListener;
import net.frozenorb.foxtrot.gameplay.armorclass.parameter.ArmorClassParameter;
import net.frozenorb.foxtrot.gameplay.armorclass.type.*;
import net.frozenorb.foxtrot.gameplay.armorclass.type.kitmap.*;
import net.frozenorb.foxtrot.team.dtr.DTRBitmask;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.entity.Player;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;

import java.util.*;

public class ArmorClassHandler implements Listener {
    private Foxtrot instance;

    @Getter private List<ArmorClass> armorClasses = new ArrayList<>();
    @Getter private Map<UUID, ArmorClass> activeSets = new HashMap<>();

    public ArmorClassHandler(Foxtrot instance) {
        this.instance = instance;

        if (Foxtrot.getInstance().getMapHandler().isKitMap()) {
            this.armorClasses.add(new CasperTheGhost());
            this.armorClasses.add(new GrimReaperClass());
            this.armorClasses.add(new UndeadWarriorClass());
        } else {
            this.armorClasses.add(new RaiderClass());
            this.armorClasses.add(new PyromaniacClass());
            this.armorClasses.add(new GrinderClass());
            this.armorClasses.add(new SpidermanClass());
            this.armorClasses.add(new TrapperClass());
        }

        Proton.getInstance().getCommandHandler().registerParameterType(ArmorClass.class, new ArmorClassParameter());
        this.instance.getServer().getPluginManager().registerEvents(this, this.instance);
        this.instance.getServer().getPluginManager().registerEvents(new ArmorClassListener(this), this.instance);
        this.instance.getServer().getPluginManager().registerEvents(new ShardListener(), this.instance);
    }

    public ArmorClass findByRedeemItem(ItemStack itemStack) {
        for (ArmorClass armorClass : this.armorClasses) {
            if (armorClass.isRedeemable(itemStack)) {
                return armorClass;
            }
        }

        return null;
    }

    public ArmorClass findByPiece(ItemStack itemStack) {
        for (ArmorClass armorClass : this.armorClasses) {
            if (armorClass.isPiece(itemStack)) {
                return armorClass;
            }
        }

        return null;
    }

    public ArmorClass findWearing(Player player) {
        for (ArmorClass armorClass : this.armorClasses) {
            if (armorClass.isWearing(player)) {
                return armorClass;
            }
        }

        return null;
    }

    public ItemStack createShard(Player player, ArmorClass armorClass, int amount) {
        final List<String> toReturn = new ArrayList<>();
        toReturn.add("");
        toReturn.add(ChatColor.translate(armorClass.getChatColor() + "❙ &fArmor Class: " + armorClass.getDisplayName()));
        toReturn.add(ChatColor.translate(armorClass.getChatColor() + "❙ &fGenerated By: " + player.getName()));
        toReturn.add("");
        toReturn.add(ChatColor.GREEN + "Double Click this shard on the armor you want to put it on!");

        return ItemBuilder.of(Material.FLINT).name(armorClass.getDisplayName() + " Shard").setLore(toReturn).amount(amount).build();
    }

    public static boolean isAllowed(Location location) {
        if (Foxtrot.getInstance().getMapHandler().isKitMap()) {
            return true;
        }

        return !Foxtrot.getInstance().getServerHandler().isWarzone(location) && location.getWorld().getEnvironment() == World.Environment.NORMAL && !DTRBitmask.KOTH.appliesAt(location) && !DTRBitmask.CONQUEST.appliesAt(location) && !DTRBitmask.CITADEL.appliesAt(location) && !DTRBitmask.DTC.appliesAt(location) && !DTRBitmask.SAFE_ZONE.appliesAt(location);
    }

    public ArmorClass findArmorClass(String id) {
        return this.armorClasses.stream().filter(it -> it.getId().equalsIgnoreCase(id)).findFirst().orElse(null);
    }
}
